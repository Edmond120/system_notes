Socket
	A connection between 2 programs over a network.
	
	A socket corresponds to an IP (internet protocol) Address / Port pair.
		
	To use a socket
		1. create the socket

		2. bind it to an address and port

		3. listen/initiate a connection

		4. send/receive data

socket <sys/socket.h>

	Creates a socket

	Returns a socket descriptor (int that works like a file descriptor)

	socket(domain, type, protocol)

		domain: type of address
			AF_INET or AF_INET6

		type
			SOCK_STREAM or SOCK_DGRAM

		protocol
			Combination of domain and type settings
	
			If set to 0 the OS will set to correct protocol (TCP or UDP)

	example:
		int sd = socket(AF_INET, SOCK_STREAM, 0);

System library calls use a struct addrinfo to represent network addresses (containing
information like IP address, port, protocol...)

	struct addrinfo

		.ai_family
			AF_INET: IPv4
			AF_INET6: IPv6
			AF_UNSPEC: IPv4 or IPv6

		.ai_socktype
			SOCK_STREAM
			SOCK_DGRAM

		.ai_flags
			AI_PASSIVE: Automaticaly set to any incoming IP address.

		.ai_addr
			Pointer to a struct sockaddr containing the IP address.
		
		.ai_addrlen
			Size of the address in bytes.

	getaddrinfo <sys/types.h> <sys/socket.h> <netdb.h>

		Lookup information about the desired network address and get one or more
		matching struct addrinfo entries

		getaddrinfo(node, service, hints, results);
			
			node
				String containing an IP address or hostname to lookup
		
				If NULL, use the local machine's IP address

			service
				String with a port number or service name (if the service is in
				/etc/services)

			hints
				Pointer to a struct addrinfo used to provide settings for the lookup
				(type of address, etc.)

			results
				Pointer to a struct addrinfo that wil be linked list containing entries
				for each matching addre
accept (server only) <sys/socket.h>

	Accept the next client in the queue of a socket in the listen state.

	Used for stream sockets.

	Performs the server side of the 3 way handshake 

	struct addrinfo{
		int ai_flags;
		int ai_family;
		int ai_socktype;
		int ai_protocol;
		socklen_t ad_addrlen;
		struct sockaddr *ai_addr;
		char *ai_cannonname;
		struct addrinfo *ai_next;
	}

	Using getaddrinfo
		struct addrinfo * hints, * results;
		hints = (struct addrinfo *)calloc(1,sizeof(addrinfo));
		hints-> ai_family = AF_INET;
		hints-> ai_flags = 

bind (server only) <sys/socket.h>

	Binds the socket to and address and port
	
	Returns 0 (success, or -1 a failure)		

	int bind (socket descriptor, address, addresslength)

	socket descriptor : return value of socket

listen (server only) <sys/socket.h>

	Set a socket to passively await a connection,
	
	Needed for stream sockets.

	Does not block.

	listen (socket descriptor, backlog)

		socket descriptor
			return value of socket

		backlog
			Number of connections that can be queued up

			Depending on the protocol, this may not do much

accept (server only) <sys/socket.h>

	Accept the next client in the queue of a socket in the listen state.

	Used for stream sockets.

	Performs the server side of the 3 way handshake

	Creates a new socket for communicating with the client, the listening socket is not modified.

	Returns a descriptor to the new socket

	Blocks until a connection attempt is made

	accept(socket descriptor, address, address length)

	socket descirptor:
		descriptor for the listening docket

	address
		poitner to a struct sockaddr_storage that will contain information about the new socket 
		after accept successds.

	address length
		Pointer to a variable that will contain the length of the socket address

Using listen and accept

	//create socket
	int sd;
	sd = socket(AF_INET, SOCK_STREAM,0);
	//use getaddrinfo and bind

	listen(sdm,10);

	int client_socket;
	socklen_t sock_size;
	struct sockaddr_storage client_address;

	client_socket = accept(sd, (struct sockaddr *) &client_address, &sock_size);

connect (client only) <sys/socket.h> <sys/types.h>

	Used for stream clouds
	
		Performs the client side of the 3 way handshake

	Binds until a connecton 


